package gr.knowledge.internship.demo.web.rest;

import gr.knowledge.internship.demo.domain.Products;
import gr.knowledge.internship.demo.service.ProductsService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;
import org.springframework.data.domain.Sort;

@RestController
@RequestMapping("/knowledge")
public class ProductController {

    private final ProductsService productsService;

    public ProductController(ProductsService productsService) {
        this.productsService = productsService;
    }


    /* GetAll */
    @GetMapping("/allProducts")
    public List<Products> getAllProducts() {
        return productsService.findAllProducts();
    }


    /* GetById */
    /*
    @GetMapping("/getProductById/{id}")
    public Products getProductById(@PathVariable(value = "id") Long id) {
        return productsService.checkIfEntityExists(id);
    }
    */

    @GetMapping("/getProductById/{id}")
    public boolean getProductById(@PathVariable(value = "id") Long id) {
        return productsService.getProductById(id);
    }


    /* POST (createNew) */
    @PostMapping("/createNewProduct")
    public Products saveProducts(@RequestBody Products products) {
        return productsService.saveProducts(products);
    }


    /* PUT (update) */
    @PutMapping("/updateProduct/{id}")
    public Products updateProducts(@RequestBody Products products) {
        return productsService.saveProducts(products);
    }


    /* DELETE ById */
    @DeleteMapping("/deleteProductById/{id}")
    void deleteProductById(@PathVariable Long id) {
        productsService.deleteProductById(id);
    }


    /* Select με 2 params */
    //@GetMapping
    //public List<Products> getProductsByCategoryAndQuantity(@RequestParam("category") String productCategory, @RequestParam("quantity") int productQuantity) {
    //    return productsService.getProductsByCategoryAndQuantity(productCategory, productQuantity);
    //}
    /* POSTMAN */
    //http://localhost:8080/knowledge?category=cat5&quantity=3


    @GetMapping("/products/{category}/{quantity}")
    public ResponseEntity<List<Products>> getProductsByCategoryAndQuantity(
            @PathVariable("category") String category,
            @PathVariable("quantity") long quantity) {

        List<Products> products = productsService.getProductsByProductCategory(Optional.ofNullable(category), quantity);
        return ResponseEntity.ok(products);
    }


    /* Patch */
    @PatchMapping(value = "/updateProductById/{productId}")
    public Products partiallyUpdateProduct(@PathVariable("productId") Long productId, @RequestBody Products products) {
        return productsService.partiallyUpdateProduct(productId, products);
    }


    @GetMapping("/productsQuantity")
    public Long allProduct(){
            return productsService.allProducts();
    }


    /* 3.Write a query to retrieve all products in a specific category and sort them by price in descending order. */
    //@GetMapping("/products/{category}/sortedByPriceDesc")
    //public List<Products> getAllProductsInCategorySortedByPriceDesc(@PathVariable("category") String productCategory) {
    //    return productsService.getAllProductsInCategorySortedByPriceDesc(productCategory);
    //}

    @GetMapping("/products/{category}/sortedByPriceDesc")
    public List<Products> getByProductCategory(@PathVariable("category") String productCategory) {
        return productsService.getByProductCategory(productCategory);
    }

    /*5.Write a query to retrieve the total revenue generated by the store in the last month.*/




}




//@RequestMapping("/getProductById/{id}")
// public ResponseEntity<Products> getProductsById(@PathVariable(value = "id") Long id) {

//     if (optionalProducts.isPresent()) {
//      return ResponseEntity.ok(optionalProducts.get());
//   } else {
//       throw new EntityNotFoundException("Customer not found with ID: " + id);
//  }
// }