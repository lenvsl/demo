package gr.knowledge.internship.demo.service;

import gr.knowledge.internship.demo.domain.*;
import gr.knowledge.internship.demo.repository.OrderDetailsRepository;
import gr.knowledge.internship.demo.repository.OrdersRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.*;

@Service
@Transactional
public class OrdersService {


    /* sundesi me repository */
    @Autowired
    private OrdersRepository ordersRepository;
    @Autowired
    private OrderDetailsRepository orderDetailsRepository;

    @Autowired
    private CustomersService customersService;
    @Autowired
    private ProductsService productsService;

    @Autowired
    private OrderDetailsService orderDetailsService;


    /* to arxikopoiw gia na trexei */
    public OrdersService(OrdersRepository ordersRepository) {
        this.ordersRepository = ordersRepository;
    }


    /* getAll method */
    @Transactional(readOnly = true)
    public List<Orders> findAllOrders() {
        return ordersRepository.findAll();
    }


    /* getById method */
    @Transactional(readOnly = true)
    public Optional<Orders> getOrderById(Long id) {
        return ordersRepository.findById(id);
    }


    /* SAVE method */
    @Transactional
    public Orders saveOrders(Orders orders) {
        return ordersRepository.save(orders);
    }


    /* deleteById method */
    @Transactional
    public void deleteOrderById(Long id) {
        ordersRepository.deleteById(id);
    }


    /*5.Write a query to retrieve the total revenue generated by the store in the last month.*/

    /* prospatheia
    public Double calculateTotalRevenue(List<Double> orderTotal){

        //List<Long> RevenueNumbers = new ArrayList<>();
        List<Orders> orders = ordersRepository.findAll();

            for (Orders orderTotal : orderTotals){
                result += orderTotal;
                if(orders.getOrderTotal() != null){

                RevenueNumbers.add(order.getOrderTotal());
            }
            }
            return RevenueNumbers;
    }
    }*/


    /* 5 */
    public Long getTotalRevenue(Date startDate, Date endDate) {
        Long result = 0L;
        List<Orders> Orders = ordersRepository.findAll();
        for (Orders orders : Orders) {
            Date orderDate = orders.getOrderDate();
            if (orderDate.compareTo(startDate) >= 0 && orderDate.compareTo(endDate) <= 0)
                result += orders.getOrderTotal();
            //System.out.println(result);
        }
        return result;
    }


    /* askisi konnoy δ   (24.3.2013) */
    private Orders getOrderForCustomer(Long customerId, Date orderDate, Long quantity, Long productPrice) {
        Orders result = new Orders();
        result.setCustomerId(customerId);
        result.setOrderDate(orderDate);
        Long finalAmount = quantity * productPrice;
        result.setOrderTotal(finalAmount);
        return result;
    }



    /* 4 */
    public Boolean sygkrisiQuantity (Long productQuantity, Long inputQuantity){
        boolean result = true;

        if(inputQuantity >= productQuantity)
        {
            result = false;
        }
        return result;
    }




    /* askisi konnoy teliko ΕΝΩΣΗ   (24.3.2013) */

 /*   public Orders createOrderForCustomer(CustomerOrder input){
        Orders result;
        Customers customers = customersService.getById(input.getCustomerId());
        Products products = productsService.getById(input.getProductId());

       if(orderDetailsService.checkOrderDetails(products.getProductQuantity(), input.getQuantity())){
           Orders orders = getOrderForCustomer(customers.getCustomerId(), input.getOrderDate(), );
        }

    return result;
    }

}*/

    public Orders createOrderForCustomer(CustomerOrder input) {
        Orders result = new Orders();
        Customers customers = customersService.getById(input.getCustomerId());
        Products products = productsService.getById(input.getProductId());

        if (orderDetailsService.checkOrderQuantity(products.getProductQuantity(), input.getQuantity())) {
            Orders order = getOrderForCustomer(
                    input.getCustomerId(),
                    input.getOrderDate(),
                    input.getQuantity(),
                    products.getProductPrice());

            result = ordersRepository.save(order);

            orderDetailsService.createDetailsByOrder(products, order, input.getQuantity());
            productsService.updateProductQuantity(products, input.getQuantity());

        }
        return result;
    }
}





    /* boolean result = false;
        if(details.getQuantity() != null && details.getQuantity() >= quantity){
            result = true;

        }
        return result;
    }*/


    /*6.Write a query to find the top-selling products of the week and their total sales.*/
    /*
    public OrderDetails topSellingProducts (Date startDate, Date endDate) {
        List<Orders> Orders = ordersRepository.findAll();
        for (Orders orders : Orders) {
            Date orderDate = orders.getOrderDate();
            if (orderDate.compareTo(startDate) >= 0 && orderDate.compareTo(endDate)<= 0)

    }
}
*/

